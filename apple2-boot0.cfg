# Configuration for programs including two hires screens (with 6KB LOWCODE)
# Assumes no DOS, just a RWTS

FEATURES {
    STARTADDRESS: default = $800;
}
SYMBOLS {
    __EXEHDR__:    type = import;
    __FILETYPE__:  type = weak, value = $0006; # ProDOS file type
    __STACKSIZE__: type = weak, value = $0200; # 512-byte stack
    __HIMEM__:     type = weak, value = $C000; # Presumed RAM end
    __LCADDR__:    type = weak, value = $D000; # After i/o
    __LCSIZE__:    type = weak, value = $1000; # Rest of bank two
    __DSKSIZE__:   type = weak, value = 16 * 35 * 256; # entire DSK file size
    __STARTADDR__: type = weak, value = $800;  # our entry point
}
MEMORY {
    BOOTR0:  file = %O, start = $0800, size = $0e00, fill = yes; # 1st part of bootloader
    BOOTR1:  file = %O, start = $0000, size = $0200, fill = yes; # main part of bootloader (runs out of zp)
    TXT0:    file = %O, start = $0400, size = $0400, fill = yes; # text screen during loading
    
    ZP:     file = "", define = yes, start = $0080,        size = $1A;
    MAIN:   file = %O, define = yes, start = %S,           size = __DSKSIZE__ - $1000 - $400, fill = yes;
    BSS:    file = "",               start = __ONCE_RUN__, size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
    LC:     file = "", define = yes, start = __LCADDR__,   size = __LCSIZE__;
}
SEGMENTS {
    BOOT0:    load = BOOTR0, run=BOOTR0, type=ro, align=$100;
    EXEHDR:   load = BOOTR0, type=ro, optional = yes; # not really needed, but track 0 is mostly empty
    BOOT1:    load = BOOTR1, run=BOOTR1, type=ro, align=$100;
    TXT0:     load = TXT0, type=ro, align=$100, optional=yes;
    STARTUP:  load = MAIN,           type = ro;
    LOWCODE:  load = MAIN,           type = ro,  optional = yes;
    HGR:      load = MAIN,           type = rw,  optional = yes, start = $2000;
    HGR2:     load = MAIN,           type = rw,  optional = yes, start = $4000;
    RODATA:   load = MAIN,           type = ro,  align=$100;
    CODE:     load = MAIN,           type = ro;
    DATA:     load = MAIN,           type = rw;
    INIT:     load = MAIN,           type = rw;
    ONCE:     load = MAIN,           type = ro,  define   = yes;
    LC:       load = MAIN, run = LC, type = ro,  optional = yes;
    BSS:      load = BSS,            type = bss, define   = yes;
    ZEROPAGE: load = ZP,             type = zp;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
